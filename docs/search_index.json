[
["index.html", "R fundamentals Locke Data", " R fundamentals Locke Data Locke Data Locke Data is a consultancy that helps people and organisations get started with data science. We offer training, advice, and technical leadership to make sure things go more smoothly. Find out more about us at itsalocke.com. This work is licensed under a Creative Commons Attribution-NonCommercial 4.0 International License. "],
["about-r.html", "1 About R 1.1 R 1.2 Things to keep in mind 1.3 Alt-R 1.4 Why use R 1.5 Why use R", " 1 About R 1.1 R Open source language written in 2001 Backwards compatible with commercial but out of support language S(plus) myVar &lt;- rnorm(10) plot(myVar) 1.2 Things to keep in mind R works in-memory R works on a single processor R is basically very old and so quirky R is case-sensitive For later “There’s a package for that” 1.3 Alt-R As R is open source, there are some commercial implementations of R: Microsoft R Server TIBCO TERRE Oracle 1.4 Why use R Great for stats and data viz Super extendable Use lots of other languages through it 1.5 Why use R What about reading in lots of data with dynamic columns? # A demo of dynamic CSV processing list.files(&quot;../data&quot;, full.names = TRUE) %&gt;% map_df(read_csv, col_types=cols(&quot;c&quot;)) %&gt;% bind_rows() -&gt; allmydata Or being to make a chart and then reuse it with new data? p&lt;- ggplot(readFun(&quot;../data/csv1.csv&quot;), aes(x=floors)) + geom_histogram() p p %+% readFun(&quot;../data/csv3.csv&quot;) Or what about making reports? Coffee demo "],
["using-rstudio.html", "2 Using RStudio 2.1 IDE 2.2 Where everything is 2.3 Code-completion 2.4 Projects 2.5 Exercises", " 2 Using RStudio 2.1 IDE An IDE is an Interactive Development Environment. The aim is to make coding easier and, therefore, make you more productive. 2.2 Where everything is 2.3 Code-completion As we’re typing Rstudio can help us out. 2.4 Projects Projects are folder structures with an extra file. This extra file is used by RStudio to open the directory. Projects can have some options associated with them. 2.5 Exercises Create a new project called Rtraining Create a new file called MyFirstScript.R Use code completion to see what functions are available to you that begin with a Q: Will you get a different list if you typed A? "],
["useful-resources.html", "3 Useful resources 3.1 Local help 3.2 Cheatsheets 3.3 Online resources 3.4 Offline / in-person", " 3 Useful resources 3.1 Local help Code-completion ?function and ??function 3.2 Cheatsheets RStudio 3.3 Online resources Stack Overflow Twitter #rstats Metacran RDocumentation 3.4 Offline / in-person Meetups Conferences "],
["r-super-basics.html", "4 R super-basics 4.1 R data types 4.2 Maths 4.3 Exercises 4.4 Comparison 4.5 Exercises 4.6 Logic 4.7 Exercises 4.8 States 4.9 Other key syntax 4.10 Exercises", " 4 R super-basics 4.1 R data types Data type Example Integer 1 Logical TRUE Numeric 1.1 String / character “Red” Factor (enumerated string) “Amber” or 2 in c(“Red”,“Amber”,“Green”) Complex i Date “2017-07-14” 4.2 Maths Action Operator Example Subtract - 5 - 4 = 1 Add + 5 + 4 = 9 Multiply * 5 * 4 = 20 Divide / 5 / 4 = 1.25 Raise to the power ^ 5 ^ 4 = 625 Modulus %% 9 %% 4 = 1 Integer division %/% 9 %/% 4 = 2 Basic sequence : 1:3 = 1, 2, 3 4.3 Exercises See if pi exists What is the result of pi^2? 4.4 Comparison Action Operator Example Less than &lt; 5 &lt; 5 = FALSE Less than or equal to &lt;= 5 &lt;= 5 = TRUE Greater than &gt; 5 &gt; 5 = FALSE Greater than or equal to &gt;= 5 &gt;= 5 = TRUE Equal all.equal() all.equal(0.5 - 0.3,0.3 - 0.1) is TRUE Exactly equal == (0.5 - 0.3) == (0.3 - 0.1) is FALSE, 2 == 2 is TRUE Not equal != (0.5 - 0.3) != (0.3 - 0.1) is TRUE, 2 != 2 is FALSE 4.5 Exercises Is pi greater than 3? What are the results if you check to see if a sequence of 1 to 5 is less than or equal to 3? 4.6 Logic Action Operator Example Not ! !TRUE is FALSE And &amp; TRUE &amp; FALSE is FALSE, c(TRUE,TRUE) &amp; c(FALSE,TRUE) is FALSE, TRUE Or | TRUE | FALSE is TRUE, c(TRUE,FALSE) | c(FALSE,FALSE) is TRUE, FALSE Xor xor() xor(TRUE,FALSE) is TRUE Bitwise And &amp;&amp; c(TRUE,TRUE) &amp;&amp; c(FALSE,TRUE) is FALSE Bitwise Or || c(TRUE,FALSE) || c(FALSE,FALSE) is TRUE In %in% &quot;Red&quot; %in% c(&quot;Blue&quot;,&quot;Red&quot;) is TRUE Not in !( x %in% y) !(&quot;Red&quot; %in% c(&quot;Blue&quot;,&quot;Red&quot;)) = FALSE 4.7 Exercises See what’s in the variable LETTERS Write a check to see if “a” is present in LETTERS Find out which values in the sequence 1 to 10 are greater than or equal to 3 and less than 7 4.8 States States Representation True TRUE 1 False FALSE 0 Empty NULL Unknown NA Not a number e.g. 0/0 NaN Infinite e.g. 1/0 Inf 4.9 Other key syntax Action Operator Example Create / update a variable &lt;- a &lt;- 10 Create / update a variable = a = 10 Create / update a variable -&gt; 10 -&gt; a Comment # # This is my comment Help ? ?data.table Identifier ` `1`&lt;-2 4.10 Exercises Amend the lines of code you’ve written so far to store the calculations in variables Add some comments that help you remember what each line taught you "],
["r-objects.html", "5 R objects 5.1 In-memory 5.2 Vectors 5.3 Exercises 5.4 Data.frames 5.5 Exercises 5.6 Lists 5.7 Exercises 5.8 Others", " 5 R objects 5.1 In-memory All variables / objects will get stored in-memory You need memory for operations too Function Purpose ls() List what’s in-memory rm() Remove things from memory 5.2 Vectors A 1D object containing a single type of data Function Purpose c() Combine values into a vector : Generate a sequence 1:3 ## [1] 1 2 3 c(&quot;red&quot;,&quot;blue&quot;,&quot;orange&quot;) ## [1] &quot;red&quot; &quot;blue&quot; &quot;orange&quot; 5.3 Exercises Make a vector containing the numbers 1 to 50 Make a vector containing two words What happens when you combine these two vectors? 5.4 Data.frames A 2D object containing multiple classes of data Function Purpose data.frame() Construct a data.frame data.frame(a=1:2,b=c(&quot;blue&quot;,&quot;red&quot;)) ## a b ## 1 1 blue ## 2 2 red 5.5 Exercises Make a data.frame the two vectors you created in the vectors section What happened to your text vector? 5.6 Lists An object containing multiple types of objects Function Purpose list() Construct a list list(a=1:2, b=c(&quot;blue&quot;,&quot;red&quot;), df=data.frame(a=1:2,b=c(&quot;blue&quot;,&quot;red&quot;))) ## $a ## [1] 1 2 ## ## $b ## [1] &quot;blue&quot; &quot;red&quot; ## ## $df ## a b ## 1 1 blue ## 2 2 red 5.7 Exercises Make a list containing some of the variables you’ve created so far. 5.8 Others Matrix A 2D object of one data type Array A nD object of one data type "],
["r-functions.html", "6 R functions 6.1 Using a function 6.2 Function arguments 6.3 Common functions 6.4 Finding functions 6.5 Seeing how functions work 6.6 Exercises", " 6 R functions 6.1 Using a function A function does some computation on an object. The use of a function consists of: 1. A function’s name 2. Parentheses 3. 0 or more inputs Sys.Date() ## [1] &quot;2017-07-14&quot; sum(1:3) ## [1] 6 6.2 Function arguments Functions can have: 0 arguments e.g. Sys.Date() all mandatory arguments e.g. length() optional arguments e.g. sum() arguments used out of position by using their names e.g. `rnorm(mean=1, n=10) 6.3 Common functions Area Functions Metadata class, mode,length, names, nrow, ncol Measures mean, median, mode, range, sum, cumsum Strings grep, gsub, substr, trim, toupper, paste Files list.dirs, list.files, file.exists 6.4 Finding functions Find functions by: Using code-completion Using help-pages Using ?mean Using ??mean Using apropos(&quot;mean&quot;) 6.5 Seeing how functions work You can examine how many functions work by just typing their name without any parentheses. Sys.Date ## function () ## as.Date(as.POSIXlt(Sys.time())) ## &lt;bytecode: 0x00000000145dc208&gt; ## &lt;environment: namespace:base&gt; 6.6 Exercises Find a function that involves Normal distributions Find some functions operate on files "],
["r-packages.html", "7 R packages 7.1 What is a package? 7.2 Using packages 7.3 Useful packages 7.4 Finding packages 7.5 Package documentation 7.6 Exercises", " 7 R packages 7.1 What is a package? An R package is a bundle of functions and/or datasets. It extends the capabilities that the “base” and “recommended” R packages have. This gives us the ability to do a lot more. 7.2 Using packages Install a package with install.packages() Load a package with library() See what’s in a package / reference it without loading packagename::function() See what’s in a package but not exposed to the public packagename:::function() 7.3 Useful packages Area Packages Data manipulation dplyr, data.table,tidyr, stringr, forcats Data visualisation ggplot2,leaflet,ggraph Statistics tidytext, caret, broom I/O RODBC, DBI, data.table, readxl Web rvest, httr, urltools Outputs rmarkdown, revealjs, shiny, flexdashboards 7.4 Finding packages 7.5 Package documentation Packages should have documentation at the following levels: Function Workflow via vignettes NEWS DESCRIPTION READMEs on github 7.6 Exercises Load the library dplyr Browse dplyr’s help pages Read a dplyr introductory vignette Read dplyr’s README "],
["r-data-manipulation-basics.html", "8 R data manipulation basics 8.1 Grid references 8.2 Exercises 8.3 Name-checking 8.4 Exercises 8.5 Updating 8.6 Deleting 8.7 Exercises", " 8 R data manipulation basics 8.1 Grid references R works in a grid reference system like [row , column]. So… For a 1D vector, there’s just one position i.e. vector[ row ] For a data.frame, there’s two positions i.e. data.frame[ row , column ] Valid values include: positive values or ranges negative values or ranges boolean ranges names or vectors of names LETTERS[1] ## [1] &quot;A&quot; LETTERS[1:3] ## [1] &quot;A&quot; &quot;B&quot; &quot;C&quot; LETTERS[-1] ## [1] &quot;B&quot; &quot;C&quot; &quot;D&quot; &quot;E&quot; &quot;F&quot; &quot;G&quot; &quot;H&quot; &quot;I&quot; &quot;J&quot; &quot;K&quot; &quot;L&quot; &quot;M&quot; &quot;N&quot; &quot;O&quot; &quot;P&quot; &quot;Q&quot; &quot;R&quot; ## [18] &quot;S&quot; &quot;T&quot; &quot;U&quot; &quot;V&quot; &quot;W&quot; &quot;X&quot; &quot;Y&quot; &quot;Z&quot; LETTERS[-13:-1] ## [1] &quot;N&quot; &quot;O&quot; &quot;P&quot; &quot;Q&quot; &quot;R&quot; &quot;S&quot; &quot;T&quot; &quot;U&quot; &quot;V&quot; &quot;W&quot; &quot;X&quot; &quot;Y&quot; &quot;Z&quot; LETTERS[c(TRUE,FALSE)] ## [1] &quot;A&quot; &quot;C&quot; &quot;E&quot; &quot;G&quot; &quot;I&quot; &quot;K&quot; &quot;M&quot; &quot;O&quot; &quot;Q&quot; &quot;S&quot; &quot;U&quot; &quot;W&quot; &quot;Y&quot; myDF&lt;-data.frame(a=1:3, b=2:4, c=3:5) myDF[1,] ## a b c ## 1 1 2 3 myDF[,-1] ## b c ## 1 2 3 ## 2 3 4 ## 3 4 5 myDF[1,1] ## [1] 1 myDF[1:2,] ## a b c ## 1 1 2 3 ## 2 2 3 4 myDF[c(TRUE,FALSE,TRUE),] ## a b c ## 1 1 2 3 ## 3 3 4 5 myDF[,&quot;a&quot;] ## [1] 1 2 3 8.2 Exercises Select all letters before “x” Select the first 5 rows from the built-in data.frame iris Select the first 2 columns from iris Select the column Sepal.Length from iris by name 8.3 Name-checking Row names can be used to extract values. myNamedVec&lt;-c(&quot;red&quot;=&quot;RED&quot;,&quot;blue&quot;=&quot;BLUE&quot;) myNamedVec[&quot;red&quot;] ## red ## &quot;RED&quot; Column names can also be referenced. colnames( iris[,&quot;Species&quot;] ) ## NULL colnames( iris$Species ) ## NULL colnames( iris[,c(&quot;Sepal.Width&quot;,&quot;Species&quot;)] ) ## [1] &quot;Sepal.Width&quot; &quot;Species&quot; Useful for creating booleans, you can create a vector and use this inside your grid reference system. LETTERS[LETTERS&lt;&quot;T&quot;] ## [1] &quot;A&quot; &quot;B&quot; &quot;C&quot; &quot;D&quot; &quot;E&quot; &quot;F&quot; &quot;G&quot; &quot;H&quot; &quot;I&quot; &quot;J&quot; &quot;K&quot; &quot;L&quot; &quot;M&quot; &quot;N&quot; &quot;O&quot; &quot;P&quot; &quot;Q&quot; ## [18] &quot;R&quot; &quot;S&quot; myDF[myDF$a&lt;=2,] ## a b c ## 1 1 2 3 ## 2 2 3 4 8.4 Exercises Get all letters that occur after “g” Select rows from the iris data.frame where the Sepal.Length is greater than 5.8cm Select rows from the iris data.frame where the Sepal.Width is below the average for that column 8.5 Updating You can update part or all of simple objects by assigning new values against a grid-reference. myVec&lt;-LETTERS[1:3] myVec[1]&lt;-&quot;Z&quot; myVec ## [1] &quot;Z&quot; &quot;B&quot; &quot;C&quot; myDF[1, ]&lt;- 1:3 myDF ## a b c ## 1 1 2 3 ## 2 2 3 4 ## 3 3 4 5 8.6 Deleting You can use the selections to remove values myVec&lt;-myVec[-2] myVec ## [1] &quot;Z&quot; &quot;C&quot; myDF&lt;-myDF[-3,-1] myDF ## b c ## 1 2 3 ## 2 3 4 8.7 Exercises Select everything from iris except the Species column Create a copy of the iris data that just contains the first 100 rows and call it myIris Update the species column to the value “Unknown” in myIris Delete rows from myIris where the sepal length is greater than 5.5 "]
]
