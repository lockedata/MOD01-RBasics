[
["index.html", "R fundamentals Preamble 0.1 Introduction 0.2 Steph Locke 0.3 Locke Data 0.4 Conventions", " R fundamentals Locke Data Preamble This work is licensed under a Creative Commons Attribution-NonCommercial 4.0 International License. 0.1 Introduction Welcome to the first book in Locke Data’s series of books on R and data science! This first book introduces R, helps you get the most out of the RStudio programming environment, and teaches basic data manipulation using R functions that you get out of the box. 0.2 Steph Locke 0.3 Locke Data Locke Data is a consultancy that helps people and organisations get started with data science. We offer training, advice, and technical leadership to make sure things go more smoothly. Find out more about us at itsalocke.com. 0.4 Conventions Throughout this book various conventions will be used. In terms of basic formatting: This is standard text. This is code or a symbol Keyboard Key There will also be callouts throughout the book. Some are for information, some expect you to do things. This is a tip about what I’ve just said. This is kind of like a tip but is for those break-the-glass, moments where things have gone very very wrong and you need to escape. This is something I recommend you do as you’re reading. This let’s you know that something I mention briefly will be followed up later, whether in this book or a later one. If this is still here, someone at Locke Data needs to do something! "],
["about-r.html", "1 About R 1.1 Key points to know about R", " 1 About R R is an open source language released in 2001 that’s ideal for data wrangling and data science. R has a long lineage - it was written to re-implement the language S. S was a commerical language written in the mid-1970s to enable statistical and graphical processing. Indeed much code written in S can still run today, a phenomenal feat! If you ever look at how R and wonder “Why on Earth does it work like that?”, the usual answer is “Because S”.1 plot(rnorm(10)) The last paragraph might lead you to ponder why R is in use today and why the popularity is growing? R is a vibrant ecosystem that enables people to extend, enhance, and replace itself. There are many paradigms in R to facilitate object-oriented programming, functional programming, and more. If you can write something in R, C++, FORTRAN2, Python, or JavaScript you can extend R. There are currently more than eleven thousand extensions to R a.k.a. packages in the core ecosystem (CRAN) and two and a half thousand packages in the genomics ecosystem (BioConductor). We’re also seeing emerging ecosystems and paradigms within CRAN. The tidyverse is one such ecosystem, focussed primarily on analysing tabular data, and it will be used in future works extensively. 1.1 Key points to know about R R works in-memory which means that the processing is fast but the amount of data you can process is limited to how much RAM your data takes up and how much your computations will require. R is not multi-threaded by default. R works on a single CPU core and parallelisation requires additional packages and often additional coding. R is quirky! R works a bit like lots of languages which makes it easy to pick up in some respects, but because of the S compatability it’s actually pretty darn old and a result, really odd in places. Coding R will give you the typical gotcha’s and add another, case sensitivity. R is (un)fortunately a language where “Red” and “red” are different and this also extends to variable and function names. As a consequence, the most common errors you’ll find when writing code in R are: Mis-placed or missing commas Mis-placed or missing brackets Incorrect case used when typing With so many packages available to extend R with, the answer to “how do I write this?” is usually “there’s a package for that”. We’ll look at finding packages later in this book. If you’d like to find out about the assignment operators’ history (&lt;- and -&gt;) and many of the other quirks of R, the article Rbitrary is fantastic and highly irreverent reading.↩ Yes, it still exists and yes, R still relies on it for some key algorithms↩ "],
["why-use-r.html", "2 Why use R? 2.1 Data wrangling 2.2 Data science 2.3 Data visualisation", " 2 Why use R? R as a programming language is brilliant at it’s core competencies – statistics and data visualisation. It’s also a great “glue” language, by which I mean that you can use it perform computations in many different languages and combine the results smoothly. As a result, R enables you to be an effective data wrangler, data scientist, and/or data visualisation practitioner. I wanted to include some code snippets here that exemplify how little is required to do things in R that in other languages or tools used to take me a substantial amount of time. These are illustrative only. Don’t worry if they don’t make much sense. Writing code like these examples will be covered in later books. 2.1 Data wrangling A common issue I’ve had in the past is data from multiple sources that should usually conform to a template but don’t. You end up with a whole stack of files that don’t quite match the template and as a result getting all this data read, combined, and then output somewhere else is often an incredibly difficult task. This snippet of R code performs the following steps: Make functionality from the tidyverse available Identify files needing to be read and combined Read each file individually, whilst applying a column type enforcement Combine the results Combining the results involves matching the columns by name. It will create new columns when it finds additional columns in some of the data and fill in the data. When columns are missing from a dataset it will put NAs in the column. library(tidyverse) list.files(&quot;../data&quot;, full.names = TRUE) %&gt;% # Change &quot;../data&quot; to where your files are map_df(read_csv, col_types=cols(&quot;c&quot;)) %&gt;% bind_rows() -&gt; allmydata ## Warning: Unnamed `col_types` should have the same length as `col_names`. ## Using smaller of the two. ## Warning in rbind(names(probs), probs_f): number of columns of result is not ## a multiple of vector length (arg 1) ## Warning: 30 parsing failures. ## row # A tibble: 5 x 5 col row col expected actual file expected &lt;int&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; actual 1 1 &lt;NA&gt; 1 columns 6 columns &#39;../data/csv1.csv&#39; file 2 2 &lt;NA&gt; 1 columns 6 columns &#39;../data/csv1.csv&#39; row 3 3 &lt;NA&gt; 1 columns 6 columns &#39;../data/csv1.csv&#39; col 4 4 &lt;NA&gt; 1 columns 6 columns &#39;../data/csv1.csv&#39; expected 5 5 &lt;NA&gt; 1 columns 6 columns &#39;../data/csv1.csv&#39; ## ... ................. ... .................................................... ........ .................................................... ...... .................................................... .... .................................................... ... .................................................... ... .................................................... ........ .................................................... ## See problems(...) for more details. ## Warning: Unnamed `col_types` should have the same length as `col_names`. ## Using smaller of the two. ## Warning in rbind(names(probs), probs_f): number of columns of result is not ## a multiple of vector length (arg 1) ## Warning: 40 parsing failures. ## row # A tibble: 5 x 5 col row col expected actual file expected &lt;int&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; actual 1 1 &lt;NA&gt; 1 columns 6 columns &#39;../data/csv2.csv&#39; file 2 2 &lt;NA&gt; 1 columns 6 columns &#39;../data/csv2.csv&#39; row 3 3 &lt;NA&gt; 1 columns 6 columns &#39;../data/csv2.csv&#39; col 4 4 &lt;NA&gt; 1 columns 6 columns &#39;../data/csv2.csv&#39; expected 5 5 &lt;NA&gt; 1 columns 6 columns &#39;../data/csv2.csv&#39; ## ... ................. ... .................................................... ........ .................................................... ...... .................................................... .... .................................................... ... .................................................... ... .................................................... ........ .................................................... ## See problems(...) for more details. ## Warning: Unnamed `col_types` should have the same length as `col_names`. ## Using smaller of the two. ## Warning in rbind(names(probs), probs_f): number of columns of result is not ## a multiple of vector length (arg 1) ## Warning: 35 parsing failures. ## row # A tibble: 5 x 5 col row col expected actual file expected &lt;int&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; actual 1 1 &lt;NA&gt; 1 columns 6 columns &#39;../data/csv3.csv&#39; file 2 2 &lt;NA&gt; 1 columns 6 columns &#39;../data/csv3.csv&#39; row 3 3 &lt;NA&gt; 1 columns 6 columns &#39;../data/csv3.csv&#39; col 4 4 &lt;NA&gt; 1 columns 6 columns &#39;../data/csv3.csv&#39; expected 5 5 &lt;NA&gt; 1 columns 6 columns &#39;../data/csv3.csv&#39; ## ... ................. ... .................................................... ........ .................................................... ...... .................................................... .... .................................................... ... .................................................... ... .................................................... ........ .................................................... ## See problems(...) for more details. 2.2 Data science An aspect of building models and operationalising them that I’ve always found a bit painful is mapping the pre-processing stages to an operational scenario i.e. how do I apply my pre-processing steps to new data in order to be able to make a prediction? If I want to scale numeric variables, I need to keep some sort of record of the mean and standard deviation in the case of a z-score or the minimum and maximum values if I wanted to do a minmax score. Then I’d have to write something to apply these values to new data in an operational setting, or I’d have to transform my model’s formula to apply the scales on the fly. If I wanted to take it a step further and perform a Principal Component Analysis (PCA) to reduce the amount of features I was working with, I’d have no easy way to do that with the outputs of the R PCA function (princomp()). If I use these principal components in my model, how then to get these for my test data or in production? This snippet of R code performs the following steps: Make functionality from caret available Split my data into training and test samples with the outcome column seperate Build a linear regression model on data scaled using z-scores and turned into principal components Apply the transformations and linear model to get predictions for my test data Instead of using some of the out of the box methods and writing a really long-winded set of code, I can use functionality from the package caret to add a pre-process step to my model develoment. It will then keep these pre-process steps as part of the model and whenever I use the model to make predictions it will first process the data based on the parameters and transformations used on the training data. library(caret) ## Loading required package: lattice ## ## Attaching package: &#39;caret&#39; ## The following object is masked from &#39;package:purrr&#39;: ## ## lift training_data&lt;-mtcars[1:20,-2] training_outcome&lt;-mtcars[1:20,2] test_data&lt;-mtcars[21:32,-2] test_outcome&lt;-mtcars[21:32,2] model&lt;-train(training_data, training_outcome, method=&quot;lm&quot;, preProcess = c(&quot;scale&quot;,&quot;center&quot;,&quot;pca&quot;)) predictions&lt;-predict(model, test_data) 2.3 Data visualisation Data visualisation is an area where R makes it especially difficult to choose just a single example. Instead of showing the many fancy or interactive visualisations you can do in R, I’m instead going to show a part of the workflow. Often times, I need to make a chart and then make that chart for a lot of different datasets. These could be datasets for different customers, samples, or time slices. I can make a chart in R using the package ggplot2 to build a chart of all data. library(ggplot2) library(datasauRus) myPlot&lt;- ggplot(datasaurus_dozen, aes(x,y)) + geom_point() If you want to make a small multiples chart, where the charts are produced in a group, you can use the notion of facetting to make many small charts together. myPlot + facet_wrap(~dataset) If you wanted to produce and save a chart per dataset you can provide updated data to a chart. myPlot %+% simpsons_paradox "],
["using-rstudio.html", "3 Using RStudio 3.1 The console 3.2 Scripts 3.3 Code completion 3.4 Projects", " 3 Using RStudio RStudio is a coding interface to R that makes it easier for you to be productive.3 I’m devoting substantial amounts of this book to your working environment as you can use it to make learning and coding R much easier by taking the time to understand it. The interface will be split up into a top menu and then four panes, although only three may be visible when you first start RStudio. Clean RStudio image, no arrows If you don’t already have it, you should install R and RStudio. If you’re on Windows, it’s also great if you can install Rtools. This gives you the tools to install packages from GitHub later on down the line. 3.1 The console Make a small gif of using the console The (bottom) left hand section is the console. This is where you can execute R code directly. To use the console you type some code alongside the &gt; and hit Enter for the code to be executed. The result will then appear underneath your line of code. Errors, warnings, and messages will also appear in the console. We’ll discuss what these are later in the book Use the console to add two numbers together. If the code you entered wasn’t a complete statement e.g. 1 + 2 +, when you hit Enter, the &gt; will change to a + indicating the code you’re writing will be appended to the line before it. If you want to clean your console and start afresh, hit Ctrl + L to remove whatever has been executed in the console this session. You can use your up and down arrow keys to navigate through previous code you’ve written and executed. If you commit one of the most common coding errors (incorrect amounts or places of brackets and commas) you might end up with an incomplete line and basically lock your console into having thte + symbol at the beginning of each line. If you find yourself stuck with commands just writing and writing and never executing, hit the Esc key to cancel the code and get back to the standard cursor. 3.2 Scripts Create gif of adding a file RStudio allows you to create and work with files containing code. These files give you a way to store and manage your code. The most common file types you might use are R files (.R) and rmarkdown files (.Rmd). rmarkdown files are for generating documents with text and R code interleaved (like this book!) will be covered in a book in future. If you want to get going, checkout the rmarkdown site. You can create one of these files by going to File &gt; New &gt; R Script, the New File button, or with the hotkey combo4 of Ctrl + Shift + N. In an R script you can type code and execute it by hitting Ctrl + Enter5, or selecting the code to run and hitting the Run button. You can execute all the code in a script by hitting Ctrl + Shift + Enter or hitting the Source button. Open a new R script. Write 10*5 in it and execute the code. 3.3 Code completion Create a gif with code completion Whilst writing scripts or typing in our console, we can get help and be more productive by using code completion. Code completion will pick up from what we’ve typed so far and provide a navigable list of suggestions. As we navigate through the list, it’ll provide help text where possible and then it will complete the code we were typing. You access the code completion by hitting Tab whilst typing. Once it’s up you can keep typing to refine the list. Your arrow keys allow you to navigate the list. Hit Esc to back out of the completion capability. Hit Tab to accept whatever value in the list is currently highlighted. On a new line of your script, type a and activate your code completion. Browse the list then cancel out of the list. Overwrite the a with an A and go back into the code completion. Do youu get the same list? What’s different and why? 3.4 Projects So far you’ve seen R as a scratchpad (via the console) and for making an isolated script, but a lot of the time we have to be put data, multiple scripts, documentation and more into a project. An RStudio project is a folder with an extra file. This file can be used to open RStudio, with everything laid out like it was before you closed the project. It can store preferences to allow projects to vary from the way you normally do things.6 At this point in your R coding career, keeping everything where you left off is great. Later on, and especially if you work in anything where reproducibility is valued, you can go to Tools &gt; Project Options … and set the .Rdata fields to “no” so that nothing loads up into memory when you load the project. You can, and should, create a new R project when embarking on a new area of work. To create a project go to File &gt; New Project. Create a gif of making a project This will popup a dialogue that gives you the option to create a brand new project directory, create one from some existing directory you might already have, and creating one with the content of a project in your source control system. Most commonly, you’ll want to create a new directory project. Once selected it’ll then give you the option to create an empty project, a shiny project, or an R package. You’ll normally select the empty projects. Once an option is selected, provide a name and where the project should go. Working with source control, shiny, and creating R packages are all in later books. You can navigate to projects using the project option in the top right corner or in the File section. Create a new project to store the answers to exercises and any code you try out during this book. You don’t have to save the script you were working on before this (unless you want to!) If coding interfaces were game modes, RStudio is Easy mode, Visual Studio is Normal, R-GUI is Hard, vim is Insane, and Emacs is Legacy.↩ I’m a big fan of hotkeys!↩ This hotkey is really nifty as it’ll find the start and end of a block of code and send it all to the console to be executed.↩ Like converting tabs to spaces and the number of spaces characters it should replace with.↩ "],
["useful-resources.html", "4 Useful resources 4.1 The built-in help 4.2 Online 4.3 In-person", " 4 Useful resources Our coding environment RStudio is a great help to us. The code completion makes it easy to find things kind of related to what you’re typing but sometimes you need to do a bit more digging or read a bit more than the snippet of help in the code completion window. 4.1 The built-in help R has pretty great built-in help. You might understand some of it but there’s usually lots of it and most help files give you examples to run. The help files are accessible in the bottom right-hand corner of RStudio. If you want to see some of the built-in help whilst using code completion, you can hit F1. Similarly, you can select a word in script and hit F1 to go to the help. If you don’t have something specific to select from you can go to the help window and use the search facility. If there’s a function that matches what you’re typing that’ll be shortlisted, and you can select it and hit Enter alternatively if you don’t get a match, hitting Enter once you’ve finished typing will enact a fuzzier search. Another way you can get help is by looking at the index of functions available for a given package. You go to the Packages tab and click on the package you’re interested in. This loads up the index for that package and you can then read through what’s available. The help window has some handy navigation features to make it easier to use: In-file search bar for finding words in a help file Navigation arrows for moving between files like Back and Forwards on a web-browser. The New Window button creates a popup with the file so that you make it bigger or put it onto another monitor. 4.2 Online R is a great community that has produced many resources. You can search for previous R questions or ask new ones on the ubiquitous Stack Overflow. If you’re tweeting about R, use the hashtag #rstats. If you want to see what’s happening in the R world, I recommend you follow Mara Averick (@dataandme). RStudio provide a trove of fantastic cheatsheets – including one for being super-productive in RStudio. These are great to download and/or print in order to keep handy as you’re learning. Documentation for R packages is available on CRAN but there a number of online sites that try to iprove the experience, including rdrr.io and rdocumentation.org. R-bloggers is a site consolidating blogs from more than 500 people. It’s a great way to find how-tos. R Weekly is a curated newsletter of key goings on, new packages, and blog posts from the R world. 4.3 In-person The R community as well as having doing a huge amount of tweeting, actually gets together in-person quite a bit. If you’d like to go a meetup, then you should check out this meetup directory. As well as these happenings, you can also check out R-Ladies events. We have a growing number of conferences and you can find ones to attend via the conferences directory. "],
["r-super-basics.html", "5 R super-basics 5.1 R data types 5.2 Maths 5.3 Comparison 5.4 Logic 5.5 States 5.6 Other key syntax 5.7 #Exercises", " 5 R super-basics 5.1 R data types Data type Example Integer 1 Logical TRUE Numeric 1.1 String / character “Red” Factor (enumerated string) “Amber” or 2 in c(“Red”,“Amber”,“Green”) Complex i Date “2017-08-07” 5.2 Maths Action Operator Example Subtract - 5 - 4 = 1 Add + 5 + 4 = 9 Multiply * 5 * 4 = 20 Divide / 5 / 4 = 1.25 Raise to the power ^ 5 ^ 4 = 625 Modulus %% 9 %% 4 = 1 Integer division %/% 9 %/% 4 = 2 Basic sequence : 1:3 = 1, 2, 3 5.2.1 Exercises See if pi exists; What is the result of pi^2? 5.3 Comparison Action Operator Example Less than &lt; 5 &lt; 5 = FALSE Less than or equal to &lt;= 5 &lt;= 5 = TRUE Greater than &gt; 5 &gt; 5 = FALSE Greater than or equal to &gt;= 5 &gt;= 5 = TRUE Equal all.equal() all.equal(0.5 - 0.3,0.3 - 0.1) is TRUE Exactly equal == (0.5 - 0.3) == (0.3 - 0.1) is FALSE, 2 == 2 is TRUE Not equal != (0.5 - 0.3) != (0.3 - 0.1) is TRUE, 2 != 2 is FALSE 5.3.1 Exercises Is pi greater than 3? What are the results if you check to see if a sequence of 1 to 5 is less than or equal to 3? 5.4 Logic Action Operator Example Not ! !TRUE is FALSE And &amp; TRUE &amp; FALSE is FALSE, c(TRUE,TRUE) &amp; c(FALSE,TRUE) is FALSE, TRUE Or | TRUE | FALSE is TRUE, c(TRUE,FALSE) | c(FALSE,FALSE) is TRUE, FALSE Xor xor() xor(TRUE,FALSE) is TRUE Bitwise And &amp;&amp; c(TRUE,TRUE) &amp;&amp; c(FALSE,TRUE) is FALSE Bitwise Or || c(TRUE,FALSE) || c(FALSE,FALSE) is TRUE In %in% &quot;Red&quot; %in% c(&quot;Blue&quot;,&quot;Red&quot;) is TRUE Not in !( x %in% y) !(&quot;Red&quot; %in% c(&quot;Blue&quot;,&quot;Red&quot;)) = FALSE 5.4.1 Exercises See what’s in the variable LETTERS; Write a check to see if “a” is present in LETTERS; Find out which values in the sequence 1 to 10 are greater than or equal to 3 and less than 7. 5.5 States States Representation True TRUE 1 False FALSE 0 Empty NULL Unknown NA Not a number e.g. 0/0 NaN Infinite e.g. 1/0 Inf 5.6 Other key syntax Action Operator Example Create / update a variable &lt;- a &lt;- 10 Create / update a variable = a = 10 Create / update a variable -&gt; 10 -&gt; a Comment # # This is my comment Help ? ?data.table Identifier ` `1`&lt;-2 5.7 #Exercises Amend the lines of code you’ve written so far to store the calculations in variables; Add some comments that help you remember what each line taught you. "],
["r-objects.html", "6 R objects 6.1 In-memory 6.2 Vectors 6.3 Data.frames 6.4 Lists 6.5 Others", " 6 R objects 6.1 In-memory All variables / objects will get stored in-memory; You need memory for operations too. Function Purpose ls() List what’s in-memory rm() Remove things from memory 6.2 Vectors A 1D object containing a single type of data Function Purpose c() Combine values into a vector : Generate a sequence 1:3 ## [1] 1 2 3 c(&quot;red&quot;,&quot;blue&quot;,&quot;orange&quot;) ## [1] &quot;red&quot; &quot;blue&quot; &quot;orange&quot; 6.2.1 Exercises Make a vector containing the numbers 1 to 50; Make a vector containing two words; What happens when you combine these two vectors? 6.3 Data.frames A 2D object containing multiple classes of data Function Purpose data.frame() Construct a data.frame data.frame(a=1:2,b=c(&quot;blue&quot;,&quot;red&quot;)) ## a b ## 1 1 blue ## 2 2 red 6.3.1 Exercises Make a data.frame the two vectors you created in the vectors section; What happened to your text vector? 6.4 Lists An object containing multiple types of objects Function Purpose list() Construct a list list(a=1:2, b=c(&quot;blue&quot;,&quot;red&quot;), df=data.frame(a=1:2,b=c(&quot;blue&quot;,&quot;red&quot;))) ## $a ## [1] 1 2 ## ## $b ## [1] &quot;blue&quot; &quot;red&quot; ## ## $df ## a b ## 1 1 blue ## 2 2 red 6.4.1 Exercises Make a list containing some of the variables you’ve created so far. 6.5 Others Matrix A 2D object of one data type Array A nD object of one data type "],
["r-functions.html", "7 R functions 7.1 Using a function 7.2 Function arguments 7.3 Common functions 7.4 Finding functions 7.5 Seeing how functions work 7.6 Exercises", " 7 R functions 7.1 Using a function A function does some computation on an object. The use of a function consists of: A function’s name; Parentheses; 0 or more inputs. Sys.Date() ## [1] &quot;2017-08-07&quot; sum(1:3) ## [1] 6 7.2 Function arguments Functions can have: 0 arguments e.g. Sys.Date(); all mandatory arguments e.g. length(); optional arguments e.g. sum(); arguments used out of position by using their names e.g. `rnorm(mean=1, n=10). 7.3 Common functions Area Functions Metadata class, mode,length, names, nrow, ncol Measures mean, median, mode, range, sum, cumsum Strings grep, gsub, substr, trim, toupper, paste Files list.dirs, list.files, file.exists 7.4 Finding functions Find functions by: Using code-completion Using help-pages Using ?mean Using ??mean Using apropos(&quot;mean&quot;) 7.5 Seeing how functions work You can examine how many functions work by just typing their name without any parentheses. Sys.Date ## function () ## as.Date(as.POSIXlt(Sys.time())) ## &lt;bytecode: 0x000000001adb7a28&gt; ## &lt;environment: namespace:base&gt; 7.6 Exercises Find a function that involves Normal distributions; Find some functions operate on files. "],
["r-packages.html", "8 R packages 8.1 What is a package? 8.2 Using packages 8.3 Useful packages 8.4 Finding packages 8.5 Package documentation 8.6 Exercises", " 8 R packages 8.1 What is a package? An R package is a bundle of functions and/or datasets. It extends the capabilities that the “base” and “recommended” R packages have. This gives us the ability to do a lot more. 8.2 Using packages Install a package with install.packages(); Load a package with library(); See what’s in a package / reference it without loading packagename::function(); See what’s ina package but not exposed to the public packagename:::function(). 8.3 Useful packages Area Packages Data manipulation dplyr, data.table,tidyr, stringr, forcats Data visualisation ggplot2,leaflet,ggraph Statistics tidytext, caret, broom I/O RODBC, DBI, data.table, readxl Web rvest, httr, urltools Outputs rmarkdown, revealjs, shiny, flexdashboards 8.4 Finding packages 8.5 Package documentation Packages should have documentation at the following levels: Function; Workflow via vignettes; NEWS; DESCRIPTION; READMEs on github. 8.6 Exercises Load the library dplyr; Browse dplyr’s help pages; Read a dplyr introductory vignette; Read dplyr’s README. "],
["r-data-manipulation-basics.html", "9 R data manipulation basics 9.1 Grid references 9.2 Grid references 9.3 Grid referencing 9.4 Grid referencing vectors 9.5 Grid referencing data.frames 9.6 Name-checking 9.7 Self-referencing 9.8 Updating 9.9 Deleting", " 9 R data manipulation basics 9.1 Grid references R works in a grid reference system like [row , column]. So… For a 1D vector, there’s just one position i.e. vector[ row ] For a data.frame, there’s two positions i.e. data.frame[ row , column ] 9.2 Grid references Valid values include: Positive values or ranges; Negative values or ranges; Boolean ranges; Names or vectors of names. 9.3 Grid referencing 9.4 Grid referencing vectors LETTERS[1] ## [1] &quot;A&quot; LETTERS[1:3] ## [1] &quot;A&quot; &quot;B&quot; &quot;C&quot; LETTERS[-1] ## [1] &quot;B&quot; &quot;C&quot; &quot;D&quot; &quot;E&quot; &quot;F&quot; &quot;G&quot; &quot;H&quot; &quot;I&quot; &quot;J&quot; &quot;K&quot; &quot;L&quot; &quot;M&quot; &quot;N&quot; &quot;O&quot; &quot;P&quot; &quot;Q&quot; &quot;R&quot; ## [18] &quot;S&quot; &quot;T&quot; &quot;U&quot; &quot;V&quot; &quot;W&quot; &quot;X&quot; &quot;Y&quot; &quot;Z&quot; LETTERS[-13:-1] ## [1] &quot;N&quot; &quot;O&quot; &quot;P&quot; &quot;Q&quot; &quot;R&quot; &quot;S&quot; &quot;T&quot; &quot;U&quot; &quot;V&quot; &quot;W&quot; &quot;X&quot; &quot;Y&quot; &quot;Z&quot; LETTERS[c(TRUE,FALSE)] ## [1] &quot;A&quot; &quot;C&quot; &quot;E&quot; &quot;G&quot; &quot;I&quot; &quot;K&quot; &quot;M&quot; &quot;O&quot; &quot;Q&quot; &quot;S&quot; &quot;U&quot; &quot;W&quot; &quot;Y&quot; 9.5 Grid referencing data.frames myDF&lt;-data.frame(a=1:3, b=2:4, c=3:5) myDF[1,] ## a b c ## 1 1 2 3 myDF[,-1] ## b c ## 1 2 3 ## 2 3 4 ## 3 4 5 myDF[1,1] ## [1] 1 myDF[1:2,] ## a b c ## 1 1 2 3 ## 2 2 3 4 myDF[c(TRUE,FALSE,TRUE),] ## a b c ## 1 1 2 3 ## 3 3 4 5 myDF[,&quot;a&quot;] ## [1] 1 2 3 9.5.1 Exercises Select all letters before “x”; Select the first 5 rows from the built-in data.frame iris; Select the first 2 columns from iris; Select the column Sepal.Length from iris by name. 9.6 Name-checking Row names can be used to extract values. myNamedVec&lt;-c(&quot;red&quot;=&quot;RED&quot;,&quot;blue&quot;=&quot;BLUE&quot;) myNamedVec[&quot;red&quot;] ## red ## &quot;RED&quot; Column names can also be referenced. colnames( iris[,&quot;Species&quot;] ) ## NULL colnames( iris$Species ) ## NULL colnames( iris[,c(&quot;Sepal.Width&quot;,&quot;Species&quot;)] ) ## [1] &quot;Sepal.Width&quot; &quot;Species&quot; 9.7 Self-referencing Useful for creating booleans, you can create a vector and use this inside your grid reference system. LETTERS[LETTERS&lt;&quot;T&quot;] ## [1] &quot;A&quot; &quot;B&quot; &quot;C&quot; &quot;D&quot; &quot;E&quot; &quot;F&quot; &quot;G&quot; &quot;H&quot; &quot;I&quot; &quot;J&quot; &quot;K&quot; &quot;L&quot; &quot;M&quot; &quot;N&quot; &quot;O&quot; &quot;P&quot; &quot;Q&quot; ## [18] &quot;R&quot; &quot;S&quot; myDF[myDF$a&lt;=2,] ## a b c ## 1 1 2 3 ## 2 2 3 4 9.7.1 Exercises Get all letters that occur after “g”; Select rows from the iris data.frame where the Sepal.Length is greater than 5.8cm; Select rows from the iris data.frame where the Sepal.Width is below the average for that column. 9.8 Updating You can update part or all of simple objects by assigning new values against a grid-reference. myVec&lt;-LETTERS[1:3] myVec[1]&lt;-&quot;Z&quot; myVec ## [1] &quot;Z&quot; &quot;B&quot; &quot;C&quot; myDF[1, ]&lt;- 1:3 myDF ## a b c ## 1 1 2 3 ## 2 2 3 4 ## 3 3 4 5 9.9 Deleting You can use the selections to remove values myVec&lt;-myVec[-2] myVec ## [1] &quot;Z&quot; &quot;C&quot; myDF&lt;-myDF[-3,-1] myDF ## b c ## 1 2 3 ## 2 3 4 9.9.1 Exercises Select everything from iris except the Species column; Create a copy of the iris data that just contains the first 100 rows and call it myIris; Update the species column to the value “Unknown” in myIris; Delete rows from myIris where the sepal length is greater than 5.5. "],
["commercial-r-variants.html", "10 Commercial R variants 10.1 Microsoft", " 10 Commercial R variants This section eeds tons of work! Also, not sure if required? R has a number of limitations that can make it difficult to use at scale and some organisations will be scared of the “ABSOLUTELY NO WARRANTY” and GNU licence that R is available under. Implementing a commercial variant of R can offer benefits in terms of performance, and most especially, compliance. 10.1 Microsoft Microsoft, via the acquisition of Revolution Analytics, have open source and closed source variants of R. 10.1.1 Microsoft R Open Microsoft R Open is an extended open source variant of R. It includes additional libraries for matrix computations, a package to help with managing dependencies, parallelisation, and more. It’s 100% compatible with R and you would use this to get a bit of extra performance for your code. It’s still open-source though so it won’t address compliance issues you might want to address. 10.1.2 Microsoft R Client A closed-source implementation of R, Microsoft R Client 10.1.3 Microsoft R Server "],
["answers.html", "11 Answers", " 11 Answers "],
["packages-used.html", "12 Packages used 12.1 Suggested", " 12 Packages used 12.1 Suggested The following are used in example content. You do not need these to work through the exercises. tidyverse caret datasauRus install.packages(c(&quot;tidyverse&quot;,&quot;caret&quot;,&quot;datasauRus&quot;)) "]
]
